# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-06-02 07:42
from __future__ import unicode_literals

from django.db import connection, migrations, models
import django.db.models.deletion
import django.utils.timezone



CREATE_REDUCE_DIM_FUNCTION_SQL = """
    CREATE OR REPLACE FUNCTION public.reduce_dim(anyarray)
    RETURNS SETOF anyarray AS $function$
    DECLARE
        s $1%TYPE;
    BEGIN
        FOREACH s SLICE 1  IN ARRAY $1 LOOP
            RETURN NEXT s;
        END LOOP;
        RETURN;
    END;
    $function$ LANGUAGE plpgsql IMMUTABLE;
"""

CREATE_TAGS_SQL = """
    WITH
        object_tags AS (
            SELECT project_id, unnest(tags) AS name FROM userstories_userstory
            UNION
            SELECT project_id, unnest(tags) AS name FROM tasks_task
            UNION
            SELECT project_id, unnest(tags) AS name FROM issues_issue
        ),
        tag_colors AS (
            SELECT id project_id, reduce_dim(tags_colors) tags_colors
            FROM projects_project
            WHERE tags_colors  != '{}'
        )

        INSERT INTO tagging_tag(project_id, name, color, created_date, modified_date)
            SELECT object_tags.project_id, object_tags.name, tags_colors[2], now(), now()
            FROM object_tags
            LEFT JOIN tag_colors ON
                tag_colors.project_id = object_tags.project_id AND
                tag_colors.tags_colors[1] =  object_tags.name;
"""

CREATE_TAGGED_RELATIONS_SQL = """
    WITH
        object_tags AS (
            SELECT id object_id, project_id, unnest(tags) AS name, {userstory_content_type} content_type_id
            FROM userstories_userstory
            UNION
            SELECT id object_id, project_id, unnest(tags) AS name, {task_content_type} content_type_id
            FROM tasks_task
            UNION
            SELECT id object_id, project_id, unnest(tags) AS name, {issue_content_type} content_type_id
            FROM issues_issue
        )
        INSERT INTO tagging_taggedrelation (tag_id, object_id, content_type_id)
            SELECT tagging_tag.id, object_tags.object_id, object_tags.content_type_id
            FROM object_tags
            JOIN tagging_tag ON
                tagging_tag.project_id = object_tags.project_id AND
                tagging_tag.name =  object_tags.name;
"""

CREATE_TAGS_AND_TAGGED_RELATIONS_FOR_PROJECTS_SQL = """
    WITH
        object_tags AS (
            SELECT id project_id, unnest(tags) AS name, {project_content_type} content_type_id
            FROM projects_project
        ),
        tag_colors AS (
            SELECT id project_id, reduce_dim(tags_colors) tags_colors
            FROM projects_project
            WHERE tags_colors  != '{{}}'
        ),
        -- Saving the result of inserting the new project tags
        tagging_tag AS (
            INSERT INTO tagging_tag(project_id, name, color, created_date, modified_date)
            SELECT object_tags.project_id, object_tags.name, tags_colors[2], now(), now()
            FROM object_tags
            LEFT JOIN tag_colors ON
                tag_colors.project_id = object_tags.project_id AND
                tag_colors.tags_colors[1] =  object_tags.name
            RETURNING *
        )
        -- Using the results from the new project tags to create the tag relations
        INSERT INTO tagging_taggedrelation (tag_id, object_id, content_type_id)
            SELECT tagging_tag.id, object_tags.project_id, object_tags.content_type_id
            FROM object_tags
            JOIN tagging_tag ON
                tagging_tag.project_id = object_tags.project_id AND
                tagging_tag.name =  object_tags.name;

    -- Make project_id null for project tags
    UPDATE tagging_tag
    SET project_id = null
    FROM tagging_taggedrelation
    WHERE
        tagging_tag.id = tagging_taggedrelation.tag_id AND
        tagging_taggedrelation.content_type_id = {project_content_type};
"""

def migrate_tags(apps, schema_editor):
    Project = apps.get_model("projects", "Project")
    project_content_type = apps.get_model("contenttypes", "ContentType").objects.get_for_model(Project).id
    UserStory = apps.get_model("userstories", "UserStory")
    userstory_content_type = apps.get_model("contenttypes", "ContentType").objects.get_for_model(UserStory).id
    Task = apps.get_model("tasks", "Task")
    task_content_type = apps.get_model("contenttypes", "ContentType").objects.get_for_model(Task).id
    Issue = apps.get_model("issues", "Issue")
    issue_content_type = apps.get_model("contenttypes", "ContentType").objects.get_for_model(Issue).id

    cursor = connection.cursor()
    cursor.execute(CREATE_REDUCE_DIM_FUNCTION_SQL)
    cursor.execute(CREATE_TAGS_SQL)
    cursor.execute(CREATE_TAGGED_RELATIONS_SQL.format(
        userstory_content_type=userstory_content_type,
        task_content_type=task_content_type,
        issue_content_type=issue_content_type)
    )
    cursor.execute(CREATE_TAGS_AND_TAGGED_RELATIONS_FOR_PROJECTS_SQL.format(
        project_content_type=project_content_type)
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('projects', '0045_merge'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, verbose_name='name')),
                ('color', models.CharField(blank=True, max_length=9, null=True, verbose_name='color')),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created date')),
                ('modified_date', models.DateTimeField(verbose_name='modified date')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='items_tags', to='projects.Project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'tag',
                'verbose_name_plural': 'tags',
                'ordering': ['project', 'name', 'id'],
            },
        ),
        migrations.CreateModel(
            name='TaggedRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_relations', to='tagging.Tag', verbose_name='tag')),
            ],
            options={
                'verbose_name_plural': 'tagged_relations',
                'verbose_name': 'tagged_relation',
                'ordering': ['tag', 'content_type', 'object_id'],
            },
        ),
        migrations.RunPython(migrate_tags),
        migrations.AlterUniqueTogether(
            name='tag',
            unique_together=set([('project', 'name')]),
        ),
        migrations.AlterIndexTogether(
            name='tag',
            index_together=set([('project', 'name')]),
        ),
    ]
